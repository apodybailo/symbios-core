import os
import json
import subprocess
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import whisper

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
BOT_TOKEN = "8179721094:AAH762vsblgKaNdCAFhs50Xh2H4UjRRf5bk"
AUTHORIZED_USER_ID = 909541793
VOICE_DIR = "voice_inputs"
LOG_FILE = "voice_log.json"
WHISPER_MODEL = whisper.load_model("base")

# === –ü–ï–†–ï–ö–û–ù–ê–ô–°–Ø, –©–û –î–ò–†–ï–ö–¢–û–†–Ü–Ø –Ü–°–ù–£–Ñ ===
os.makedirs(VOICE_DIR, exist_ok=True)

async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return

    voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    ogg_path = os.path.join(VOICE_DIR, f"input_{timestamp}.ogg")
    wav_path = os.path.join(VOICE_DIR, f"input_{timestamp}.wav")

    await file.download_to_drive(ogg_path)

    # üîä –ü–Ü–î–°–ò–õ–ï–ù–ù–Ø –ó–í–£–ö–£ –ü–†–ò –ö–û–ù–í–ï–†–¢–ê–¶–Ü–á
    subprocess.run(["ffmpeg", "-i", ogg_path, "-filter:a", "volume=3.0", wav_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # üß† –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –ß–ï–†–ï–ó WHISPER
    result = WHISPER_MODEL.transcribe(wav_path)
    transcript = result["text"]

    # üíæ –õ–û–ì–£–Ñ–ú–û
    log_entry = {
        "timestamp": timestamp,
        "ogg": ogg_path,
        "wav": wav_path,
        "text": transcript
    }
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            logs = json.load(f)
    else:
        logs = []
    logs.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(logs, f, indent=2)

    # üîÅ –†–ï–ê–ö–¶–Ü–á –ù–ê –ö–û–ú–ê–ù–î–ò
    lowered = transcript.lower()
    if "–Ω–∞—É–≥–≤–∞–ª—å, –∑–±–µ—Ä–µ–∂–∏ –ø–∞–º" in lowered:
        await update.message.reply_text("üíæ –ü–∞–º º—è—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É LANA/CONTROL_POINTS (—É–º–æ–≤–Ω–æ)")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π —Ä–µ–∞–ª—å–Ω–æ –ª–æ–≥—É–≤–∞—Ç–∏–º–µ —Ü–µ
    elif "–≤–≤—ñ–º–∫–Ω–∏ —Ç—ñ–Ω—å" in lowered:
        await update.message.reply_text("üåë –†–µ–∂–∏–º –¢—ñ–Ω—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
        os.system("python3 shadow_mode.py &")
    elif "–∑–∞–ø—É—Å—Ç–∏ –∞–≥—Ä–æ—è–¥—Ä–æ" in lowered:
        await update.message.reply_text("üå± –ê–≥—Ä–æ–Ø–¥—Ä–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        os.system("python3 agro_core.py &")
    else:
        await update.message.reply_text(f"üó£ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ:\n{transcript}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.VOICE, voice_handler))
    app.run_polling()

